<style>
.fukidashi{
	width: 80%;;
	background: #FFF;
	border: solid 1px #000;
	border-radius: 23px;
	font-size: calc(150px / 11);
    margin: 7% 0 0 10%;
}
.fukidashi:before {
	content: "";
	position: absolute;
	top: 48px;
	left: -39px;
	margin-top: -28px;
	border: 20px solid transparent;
	border-right: 20px solid #FFF;
	z-index: 2;;
}
.fukidashi:after {
	content: "";
	position: absolute;
	top: 45px;
	left: -40px;
	margin-top: -25px;
	border: 20px solid transparent;
	border-right: 20px solid #000;
	z-index: 1;
}
.message_outer_frame{
    display: flex;
    align-items:center;
    width: calc(320px * 0.75)
}
.message_icon{
    background-image: url('/images/test_icon.jpg');
    background-repeat: no-repeat;
    background-size: 100% 100%;
    background-position: center;
    border-radius: 50px;
    width: 20%;
    height: calc(64px * 0.75);
    border: 1px solid gray;
}
.fukidashi_inner_text{
    padding: 0 5%;
    color:  black;
}

#show_more_message_button{
    width: 100%;
    height: 39px;
    background: white;
    text-align: center;
}
#show_more_message_button_parent{
    width:50%;
    margin: 0 auto;
}

.green{
    color: green;
    font-weight: bold;
    font-size: 20px;
}
</style>
<% @since_registration = 5 %>
<h2>csvファイルの連想配列出力</h2>
<p>メッセージ風</p>

<div id = 'output_csv_message'></div>
<div id = 'sub_btn'>


<script>

const outputCsvMessageElement = document.getElementById('output_csv_message');
var displayMessageCount; //表示されているテキストの数
var openMessageAbsoluteCount; //表示できるであろうメッセージの絶対数
var csvResultArrayDatas; //一度ロードしたCSVの連想配列データを入れ込むための変数
function csvDataOutput( dataPath ) {
        const request = new XMLHttpRequest(); // HTTPでファイルを読み込む
        request.addEventListener('load', (event) => { // ロードさせ実行
            const response = event.target.responseText; // 受け取ったテキストを返す
            var responseArray = convertCsvToArray(response);
            csvResultArrayDatas = responseArray; //クリックイベントで使用するために連想配列データを変数に入れておく
            var [resultHtml,messageCount] = outputMessages(responseArray); //関数に連想配列を渡し、HTMLに変換データ及び開いているメッセージの件数を取得。
            displayMessageCount = messageCount; //上で定義している変数に開いているメッセージの件数を代入
            outputCsvMessageElement.innerHTML = resultHtml;
            // sessionPostRequest();
            saveToLocalStrage('openMessageCount',displayMessageCount);
            showMoreMessageButtonClick();
            // changeHtmlNotifications();
        });
        request.open('GET', dataPath, true); // csvのパスを指定
        request.send();
}

function convertCsvToArray(csv) { // [ {}{}{}]型に変換して返す
    //header:CSV1行目の項目 :csvRows:項目に対する値
    const [header, ...csvRows] = csv.split('\n').filter(function (row) { //filter: 新しく配列を作る
        if (row !== '') {
        return row;
        }
    }).map(function (row) {
        return row.split(',');
    });

    var arrayInKeyAndValue;
    var resultArray;
    var tmpResultArray;

    tmpResultArray = csvRows.map(function (r) {
        arrayInKeyAndValue = header.map(function (_, index) {
        //ヘッダーの空白文字を削除。　keyとvalueに値をセット
        return ({ key: header[index].replace(/\s+/g, ''), value: r[index] });
        });
        // console.log(arrayInkeyAndValue);
        arrayInKeyAndValue = arrayInKeyAndValue.reduce(function (previous, current) {
        //{key: "物", value: "MacBook", メーカー: "apple", 値段: "3000"}を作成
        previous[current.key] = current.value;
        return previous;
        }, {});
        return arrayInKeyAndValue;
    });
    return tmpResultArray
}

function outputMessages(csvArrayData,displayMessageCount = 0){
    var today = new Date();
    var changeFormatToday = (today.getFullYear() + '/' + Number(today.getMonth()+1) + '/' + Number(today.getDate()));
    var openDate;// 連想配列内の日付を代入するための変数を用意
    var changeFormatOpenDate; //連想配列内の日付の形式を変換するための変数を定義
    var sinceRegistration = `<%= @since_registration %>` //登録日よりの経過日数をRubyより渡す
    var openMessageCount = 0;// どこまで開いたのかを判別する変数を定義
    var insertElement = '' //innerHTMLに渡すための変数、ここにHTML要素を全て入れ込む
    if (displayMessageCount !== 0 ){
        openMessageCount = displayMessageCount;
    }
    var count = 0;
    var reverseCsvArrayData = csvArrayData.reverse();

    for (var i = 0; i < csvArrayData.length; i++){
        openDate = new Date(reverseCsvArrayData[i]['日付']); //csvファイルの日付指定メニューの値を日時に変換
        changeFormatOpenDate =  (openDate.getFullYear() + '/' + Number(openDate.getMonth()+1) + '/' + Number(openDate.getDate())); //日付で整合をとるため、CSVファイル内の日付フォーマットを変換する
        count++;
        if (changeFormatOpenDate == changeFormatToday || parseInt(reverseCsvArrayData[i]['Id']) >= parseInt(sinceRegistration)){ //日付指定メニューが本日のものなのか、もしくはCSVのIdがsinceRegistrationより低いものなのか判別
            if ( count <= openMessageCount){
                continue;
            }
            insertElement += '<div class="message_outer_frame">'
            insertElement += '<div class="message_icon"></div>'
            insertElement += '<div class="fukidashi" style="color:blue">'
            insertElement += '<p class="fukidashi_inner_text">'
            insertElement += reverseCsvArrayData[i]['テキスト']
            insertElement += '</p>'
            insertElement += '</div>'
            insertElement += '</div>'
            insertElement += `<p class='output_text_relese_date'>${reverseCsvArrayData[i]['Id']}</p>`
            openMessageCount++;

            if (openMessageCount % 10 === 0){
                insertElement += '<div class="moreDisplayCsv"></div>'

                if (displayMessageCount == 0 ){
                    insertElement += '<div id="show_more_message_button_parent"><button id="show_more_message_button">もっと見る</button></div>'
                }
                break;
            }
        }else if (document.getElementById('show_more_message_button') !== null){
           document.getElementById('show_more_message_button').remove();
        }
    }
    return [insertElement,openMessageCount];
}

function showMoreMessageButtonClick(){
    var showMoreMessageButton = document.getElementById('show_more_message_button');
    if (showMoreMessageButton != null ){
        showMoreMessageButton.onclick = function(){
            var messageParent = document.getElementsByClassName('message_outer_frame');
            if (messageParent.length >= 10){
                var outputCsvTargetElements = document.getElementsByClassName('moreDisplayCsv')
                var lastTargetNum = outputCsvTargetElements.length - 1
                var reverseCsvResultArrayDatas = csvResultArrayDatas.reverse();
                var [resultHtml,displayMessageCount] = outputMessages(reverseCsvResultArrayDatas,messageParent.length);
                outputCsvTargetElements[lastTargetNum].innerHTML = resultHtml;
                saveToLocalStrage('openMessageCount',displayMessageCount);
                changeNotification();

            }
        }
    }
}

function saveToLocalStrage(key,val){
    if (localStorage.getItem(key) < val){
    localStorage[key] = val
    }
}


function changeNotification(){
    var absoluteOpenMessageCount = parseInt(localStorage.getItem("absoluteOpenMessageCount"));
    var saveOpenMessageCount = parseInt(localStorage.getItem("openMessageCount"));
    var unreadMessageCount = absoluteOpenMessageCount - saveOpenMessageCount
    var changeElementForNotice = document.getElementById('csv_message_notification')
    var changeElementForMessageCount = document.getElementById('csv_message_unread_count')
    changeElementForNotice.innerHTML = '<span>通知あり</span>'
    changeElementForMessageCount.innerHTML = `<p>未読通知<span style="color:red">${unreadMessageCount}件</p>`
}


csvDataOutput('test_1.csv');//取得したCSVデータ



// </script>


