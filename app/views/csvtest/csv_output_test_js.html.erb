<style>
table {
  border-collapse: collapse;
  border-spacing: 0;
}

td {
  font-size: 12px;
  padding: .2em .5em;
  border: solid 1px #ccc;
}

.fukidashi{
	position: absolute;
	top: 61%;
	left: 40%;
	right: 2%;
	width: 180px;
	background: #FFF;
	border: solid 1px #000;
	border-radius: 23px;
	font-size: calc(150px / 11);
}
.fukidashi:before {
	content: "";
	position: absolute;
	top: 48px;
	left: -39px;
	margin-top: -28px;
	border: 20px solid transparent;
	border-right: 20px solid #FFF;
	z-index: 2;;
}
.fukidashi:after {
	content: "";
	position: absolute;
	top: 45px;
	left: -40px;
	margin-top: -25px;
	border: 20px solid transparent;
	border-right: 20px solid #000;
	z-index: 1;
}
</style>

<%= link_to 'rubyのcsv',csv_test_ruby_path %>
<br>
<h2>キャッシュ<%= @number %></h2>
<h1>CSVファイルの出力サンプル</h1>
<%= @test %>
<h2>とりあえずの出力ここから</h2>
<div id = "csv_test"></div>
<h2>とりあえずの出力はここまで</h2>
<br>
<br>
<h2>配列変換後のデータ出力はここから</h2>
<div id = "csv_test_array"></div>
<h2>配列変換後のデータ出力ここまで</h2>
<p>consoleで配列になっているのが確認できる</p>
<br>
<br>
<h2>テーブルに落とし込む</h2>
<table id = "csv_table"></table>
<h2>テーブルに落とし込むここまで
<br>
<br>
<h2>連想配列に変換</h2>
<div id = 'csv_test_hash'></div>
<br><br>

<script>
// とりあえずの出力
const output_svg = document.getElementById('csv_test');

function csv_data(dataPath) {
    const request = new XMLHttpRequest(); // HTTPでファイルを読み込む
    request.addEventListener('load', (event) => { // ロードさせ実行
        const response = event.target.responseText; // 受け取ったテキストを返す
        // output_svg.innerHTML = response; // 表示
        convertCsvToArray(response);
    });
    request.open('GET', dataPath, true); // csvのパスを指定
    request.send();
}

//上のコードのみでとりあえず出力は出来る


//データをArray型に変換するのはここから
const output_csv = document.getElementById('csv_test_array');

function csv_data_output_array(dataPath) {
    const request = new XMLHttpRequest(); // HTTPでファイルを読み込む
    request.addEventListener('load', (event) => { // ロードさせ実行
        const response = event.target.responseText; // 受け取ったテキストを返す
        csv_array(response); //csv_arrayの関数を実行
    });
    request.open('GET', dataPath, true); // csvのパスを指定
    request.send();
}

var today = new Date();
var changeToday = (today.getFullYear() + '/' + Number(today.getMonth()+1) + '/' + Number(today.getDate()));

function csv_array(data) {
    var newday = "2021/1/2"
    const dataArray = []; //配列を用意
    const dataString = data.split('\n'); //改行で分割
    for (let i = 0; i < dataString.length; i++) { //あるだけループ
        dataArray[i] = dataString[i].split(',');
    }
    for (let i= 0; i < dataArray.length; i++){
        if (dataArray[i][1] == newday) {
            outputDays = dataArray[i];
        }
    }
    console.log(outputDays);
    output_csv.innerHTML = dataArray; //表示
    console.log(dataArray);
    console.log(dataArray[1][1])

}
csv_data_output_array('/test_1.csv');
//データをArray型に変換するのはここまで

//tableに対して出力ここから
const output_csv_for_table = document.getElementById('csv_table');　//出力箇所の取得

function csv_data_for_table(dataPath) {
    const request = new XMLHttpRequest(); // HTTPでファイルを読み込む
    request.addEventListener('load', (event) => { // ロードさせ実行
        const response = event.target.responseText; // 受け取ったテキストを返す
        csv_array_for_table(response); //csv_arrayの関数を実行
    });
    request.open('GET', dataPath, true); // csvのパスを指定
    request.send();
}

var testDateChange = new Date('2020/1/2');
console.log(testDateChange);

function csv_array_for_table(data) {
    var todayDate = new Date()
    const dataArray = []; //配列を用意
    const dataString = data.split('\n'); //改行で分割
    for (let i = 0; i < dataString.length; i++) { //あるだけループ
        dataArray[i] = dataString[i].split(','); //改行コードで区切ったデータをさらにカンマで区切り、行毎のデータにする
    }
    console.log(dataString);
    const outputData = []; //日付指定でだし分けたい場合に使用
    for (let i = 0; i < dataArray.length; i++){
        if (new Date(dataArray[i][1]) < todayDate ){ //配列の日付の部分をdateに入れて日付に変換し今日の日付と比較
            outputData[i] = dataArray[i]; //trueであれば定数にいれる
        }
    }
    console.log(outputData);
    let insertElement = ''; //テーブルタグに表示する用の変数
    outputData.forEach((element) => { //表示したい配列の中身を表示
        insertElement += '<tr>';
        element.forEach((childElement) => {
            insertElement += `<td>${childElement}</td>`
        });
        insertElement += '</tr>';
    });
    console.log(changeToday);
    output_csv_for_table.innerHTML = insertElement; // 表示
}
csv_data_for_table('/test_1.csv'); // csvのパス
//テーブルに対しての出力ここまで

//連想配列

const hashSvg = document.getElementById('csv_test_hash');

function csv_data_for_hash(dataPath) {
    const request = new XMLHttpRequest(); // HTTPでファイルを読み込む
    request.addEventListener('load', (event) => { // ロードさせ実行
        const response = event.target.responseText; // 受け取ったテキストを返す
        // output_svg.innerHTML = response; // 表示
        convertCsvToArray(response);
    });
    request.open('GET', dataPath, true); // csvのパスを指定
    request.send();
}

function convertCsvToArray(csv) {
    //header:CSV1行目の項目 :csvRows:項目に対する値
    const [header, ...csvRows] = csv.split('\n').filter(function (row) {
        if (row !== '') {
        return row;
        }
    }).map(function (row) {
        return row.split(',');
    });

    var arrayInKeyAndValue;
    var resultArray;
    var tmpResultArray;

    tmpResultArray = csvRows.map(function (r) {
        arrayInKeyAndValue = header.map(function (_, index) {
        //ヘッダーの空白文字を削除。　keyとvalueに値をセット
        return ({ key: header[index].replace(/\s+/g, ''), value: r[index] });
        });
        arrayInKeyAndValue = arrayInKeyAndValue.reduce(function (previous, current) {
        // {key: "value",key: value,key: value}を作成
        previous[current.key] = current.value;
        return previous;
        }, {});
        return arrayInKeyAndValue;
    });
    console.log(tmpResultArray);
    console.log(tmpResultArray.length);

    // resultArray = tmpResultArray.reduce(function (previous, current, index) {
    //     previous[index] = current;
    //     return previous;
    // }, {});
    insertElement = '';
    for( var i = 0; i < tmpResultArray.length; i++){
        insertElement += '<div><span>'
        insertElement += `${tmpResultArray[i]["Id"]}`
        
        insertElement += `${tmpResultArray[i]['日付']}`
        insertElement += `${tmpResultArray[i]['テキスト']}`
        insertElement += `${tmpResultArray[i]['作成者']}`
        insertElement +='</span></div>'
       
    }
    console.log(insertElement);
    return hashSvg.innerHTML = insertElement;
    // resultArray.forEach((element) => { //表示したい配列の中身を表示
    //     insertElement += '<tr>';
    //     element.forEach((childElement) => {
    //         insertElement += `<td>${childElement}</td>`
    //     });
    //     insertElement += '</tr>';
    // });;
     // 表示
}
    // return resultArray;

var csvData = csv_data_for_hash('/test_1.csv');//取得したCSVデータ
console.log(csvData);
// const resultArray = 

</script>