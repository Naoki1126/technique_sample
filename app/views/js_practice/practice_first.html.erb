<style>
.fukidashi{
	width: 80%;;
	background: #FFF;
	border: solid 1px #000;
	border-radius: 23px;
	font-size: calc(150px / 11);
    margin: 7% 0 0 10%;
}
.fukidashi:before {
	content: "";
	position: absolute;
	top: 48px;
	left: -39px;
	margin-top: -28px;
	border: 20px solid transparent;
	border-right: 20px solid #FFF;
	z-index: 2;;
}
.fukidashi:after {
	content: "";
	position: absolute;
	top: 45px;
	left: -40px;
	margin-top: -25px;
	border: 20px solid transparent;
	border-right: 20px solid #000;
	z-index: 1;
}
.message_outline_parent{
    display: flex;
    align-items:center;
    width: calc(320px * 0.75)
}
.message_icon{
    background-image: url('/images/test_icon.jpg');
    background-repeat: no-repeat;
    background-size: 100% 100%;
    background-position: center;
    border-radius: 50px;
    width: 20%;
    height: calc(64px * 0.75);
    border: 1px solid gray;
}
.fukidashi_inner_text{
    padding: 0 5%;
}
</style>
<%= @since_registration = 5 %>
<h2>csvファイルの連想配列出力</h2>
<p>メッセージ風</p>

<div id = 'output_for_hash'></div>
<script>

const outputForHash = document.getElementById('output_for_hash');

function csv_data_for_hash(dataPath) {
    const request = new XMLHttpRequest(); // HTTPでファイルを読み込む
    request.addEventListener('load', (event) => { // ロードさせ実行
        const response = event.target.responseText; // 受け取ったテキストを返す
        // output_svg.innerHTML = response; // 表示
        convertCsvToArray(response);
    });
    request.open('GET', dataPath, true); // csvのパスを指定
    request.send();
}

function convertCsvToArray(csv) {
    //header:CSV1行目の項目 :csvRows:項目に対する値
    const [header, ...csvRows] = csv.split('\n').filter(function (row) {
        if (row !== '') {
        return row;
        }
    }).map(function (row) {
        return row.split(',');
    });

    let arrayInKeyAndValue;
    let resultArray;
    let tmpResultArray;

    tmpResultArray = csvRows.map(function (r) {
        arrayInKeyAndValue = header.map(function (_, index) {
        //ヘッダーの空白文字を削除。　keyとvalueに値をセット
        return ({ key: header[index].replace(/\s+/g, ''), value: r[index] });
        });
        arrayInKeyAndValue = arrayInKeyAndValue.reduce(function (previous, current) {
        //{key: "物", value: "MacBook", メーカー: "apple", 値段: "3000"}を作成
        previous[current.key] = current.value;
        return previous;
        }, {});
        return arrayInKeyAndValue;
    });
    var today = new Date();
    var changeFormatToday = (today.getFullYear() + '/' + Number(today.getMonth()+1) + '/' + Number(today.getDate()));
    var openDate;
    var changeFormatOpenDate;
    var sinceRegistration = `<%= @since_registration %>` //登録日よりの経過日数をRubyより渡す
    console.log(sinceRegistration,typeof(sinceRegistration));
    console.log(today);
    console.log(changeFormatToday);
    insertElement = '' //innerHTMLに渡すための変数、ここにHTML要素を全て入れ込む
    
    for (var i = 0; i < tmpResultArray.length; i++){
        openDate = new Date(tmpResultArray[i]['日付']); //csvファイルの日付指定メニューの値を日時に変換
        perseOpenDate = parseInt(tmpResultArray[i]['Id']); //csvファイルのIDをintに変換
        changeFormatOpenDate =  (openDate.getFullYear() + '/' + Number(openDate.getMonth()+1) + '/' + Number(openDate.getDate())); //日付で整合をとるため、CSVファイル内の日付フォーマットを変換する
        if (changeFormatOpenDate === changeFormatToday || parseInt(tmpResultArray[i]['Id']) <= parseInt(sinceRegistration)){ //日付指定メニューが本日のものなのか、もしくはCSVのIdがsinceRegistrationより低いものなのか判別
            insertElement += '<div class="message_outline_parent">'
            insertElement += '<div class="message_icon"></div>'
            insertElement += '<div class="fukidashi" style="color:blue">'
            insertElement += '<p class="fukidashi_inner_text">'
            insertElement += tmpResultArray[i]['テキスト']
            insertElement += '</p>'
            insertElement += '</div>'
            insertElement += '</div>'
            insertElement += `<p class='output_text_relese_date'>${tmpResultArray[i]['日付']}</p>`
        }
    }
    console.log(tmpResultArray[3]["日付"].length);
    console.log(typeof(tmpResultArray[2]['Id']));
    outputForHash.innerHTML = insertElement;

    // resultArray = tmpResultArray.reduce(function (previous, current, index) {
    //     previous[index] = current;
    //     return previous;
    // }, {});
    // console.log(resultArray);
    // return resultArray;
}

csv_data_for_hash('test_1.csv');//取得したCSVデータ
// const resultArray = 

</script>